{
  "name": "sift",
  "description": "mongodb query style array filtering",
  "version": "0.0.7",
  "repository": {},
  "engines": {},
  "dependencies": {},
  "devDependencies": {
    "vows": "*",
    "underscore": "*",
    "colors": "*",
    "benchmark": "*",
    "express": "*",
    "validator": "*"
  },
  "main": "./sift.js",
  "scripts": {
    "test": "vows --spec"
  },
  "readme": "## MongoDB inspired array filtering [![Build Status](https://secure.travis-ci.org/crcn/sift.js.png)](https://secure.travis-ci.org/crcn/sift.js)\n\n## Features:\n\n- Supported operators: $in, $nin, $exists, $gte, $gt, $lte, $lt, $eq, $neq, $mod, $all, $and, $or, $nor, $not, $size, $type\n- Regexp searches\n- Function filtering\n- sub object searching\n- dot notiation searching\n- Supports node.js, and web\n- Small (2 kb minified) library \n\n\n## Node.js Examples\n\n```javascript\n\nvar sift = require('sift');\n\n//intersecting arrays\nvar sifted = sift({ $in: ['hello','world'] }, ['hello','sifted','array!']); //['hello']\n\n//regexp filter\nvar sifted = sift(/^j/, ['craig','john','jake']); //['john','jake']\n\n\n//A *sifter* is returned if the second parameter is omitted\nvar siftPeople = sift({\n\n\t//you can also filter against functions\n\tname: function(value) {\n\t\treturn value.length == 5;\n\t}\n});\n\n//filtered: [{ name: 'craig' }]\nsiftPeople([{\n\tname: 'craig',\n},\n{\n\tname: 'john'\n},\n{\n\tname: 'jake'\n}]);\n\n\n//you can test *single values* against your custom sifter\nsiftPeople.test({ name: 'sarah' }); //true\nsiftPeople.test({ name: 'tim' }); //false\\\n```\n\n## Browser Examples\n```html\n<html>\n\t<head>\n\t\t<script src=\"https://raw.github.com/crcn/sift.js/master/sift.min.js\" type=\"text/javascript\"></script>\n\t\t<script type=\"text/javascript\">\n\t\t\t//regexp filter\n\t\t\tvar sifted = sift(/^j/, ['craig','john','jake']); //['john','jake']\n\t\t</script>\n\t</head>\n\t<body>\n\t</body>\n</html>\n```\n\n## API\n\n### .sift(filter[, array][, selectorFn])\n\n- `filter` - the filter to use against the target array\n- `array` - sifts against target array. Without this, a function is returned\n- `selectorFn` - selector for the values within the array. \n\nWith an array:\n\n```javascript\nsift({$exists:true}, ['craig',null]); //['craig']\n```\n\nWithout an array, a sifter is returned:\n\n```javascript\nvar siftExists = sift({$exists:true});\n\nsiftExists(['craig',null]); //['craig']\n```\n\nWith a selector:\n\n```javascript\nvar sifter = sift({$exists:true}, function(user) {\n\treturn !!user.name;\n});\n\n\nsifter([\n\t{\n\t\tname: \"Craig\"\n\t},\n\t{\n\t\tname: null\n\t}\n])\n```\n\nWith your sifter, you can also **test** values:\n\n```javascript\nsiftExists.test(null); //false\nsiftExists.test('craig'); //true\n```\n\n\n## Supported Operators:\n\nSee MonboDB's [advanced queries](http://www.mongodb.org/display/DOCS/Advanced+Queries) for more info.\n\n### $in\n\narray value must be *$in* the given query:\n\nIntersecting two arrays:\n \n```javascript\n//filtered: ['Brazil']\nsift({ $in: ['Costa Rica','Brazil'] }, ['Brazil','Haiti','Peru','Chile']); \n``` \n\nHere's another example. This acts more like the $or operator:\n\n```javascript\nsift({ location: { $in: ['Costa Rica','Brazil'] } }, { name: 'Craig', location: 'Brazil' });\n```\n\n### $nin\n\nOpposite of $in:\n\n```javascript\n//filtered: ['Haiti','Peru','Chile']\nsift({ $nin: ['Costa Rica','Brazil'] }, ['Brazil','Haiti','Peru','Chile']); \n``` \n\n### $exists\n\nChecks if whether a value exists:\n\n```javascript\n//filtered: ['Craig','Tim']\nsift({ $exists: true }, ['Craig',null,'Tim']); \n``` \n\nYou can also filter out values that don't exist\n\n```javascript\n//filtered: [{ name: 'Craig', city: 'Minneapolis' }]\nsift({ city: { $exists: false } }, [ { name: 'Craig', city: 'Minneapolis' }, { name: 'Tim' }]); \n```\n\n### $gte\n\nChecks if a number is >= value:\n\n```javascript\n//filtered: [2, 3]\nsift({ $gte: 2 }, [0, 1, 2, 3]); \n```\n\n### $gt\n\nChecks if a number is > value:\n\n```javascript\n//filtered: [3]\nsift({ $gt: 2 }, [0, 1, 2, 3]); \n```\n\n### $lte\n\nChecks if a number is <= value.\n\n```javascript\n//filtered: [0, 1, 2]\nsift({ $lte: 2 }, [0, 1, 2, 3]); \n```\n\n### $lt\n\nChecks if number is < value.\n\n```javascript\n//filtered: [0, 1]\nsift({ $lt: 2 }, [0, 1, 2, 3]); \n```\n\n### $eq\n\nChecks if query == value. Note that **$eq can be omitted**. For **$eq**, and **$neq**\n\n```javascript\n//filtered: [{ state: 'MN' }]\nsift({ state: {$eq: 'MN' }}, [{ state: 'MN' }, { state: 'CA' }, { state: 'WI' }); \n```\n\nOr:\n\n```javascript\n//filtered: [{ state: 'MN' }]\nsift({ state: 'MN' }, [{ state: 'MN' }, { state: 'CA' }, { state: 'WI' }); \n```\n\n### $ne\n\nChecks if query != value.\n\n```javascript\n//filtered: [{ state: 'CA' }, { state: 'WI'}] \nsift({ state: {$ne: 'MN' }}, [{ state: 'MN' }, { state: 'CA' }, { state: 'WI' }); \n```\n\n### $mod\n\nModulus:\n\n```javascript\n//filtered: [300, 600]\nsift({ $mod: [3, 0] }, [100, 200, 300, 400, 500, 600]); \n```\n\n### $all\n\nvalues must match **everything** in array:\n\n```javascript\n//filtered: [ { tags: ['books','programming','travel' ]} ]\nsift({ tags: {$all: ['books','programming'] }}, [\n{ tags: ['books','programming','travel' ] }, \n{ tags: ['travel','cooking'] } ]); \n```\n\n### $and\n\nability to use an array of expressions. All expressions must test true.\n\n```javascript\n//filtered: [ { name: 'Craig', state: 'MN' }]\n\nsift({ $and: [ { name: 'Craig' }, { state: 'MN' } ] }, [ \n{ name: 'Craig', state: 'MN' }, \n{ name: 'Tim', state: 'MN' }, \n{ name: 'Joe', state: 'CA' } ]); \n```\n\n### $or\n\nOR array of expressions.\n\n```javascript\n//filtered: [ { name: 'Craig', state: 'MN' }, { name: 'Tim', state: 'MN' }]\nsift({ $or: [ { name: 'Craig' }, { state: 'MN' } ] }, [ \n{ name: 'Craig', state: 'MN' }, \n{ name: 'Tim', state: 'MN' }, \n{ name: 'Joe', state: 'CA' } ]); \n```\n\n### $nor\n\noppositve of or:\n\n```javascript\n//filtered: [ { name: 'Tim', state: 'MN' }, { name: 'Joe', state: 'CA' }]\nsift({ $or: [ { name: 'Craig' }, { state: 'MN' } ] }, [ \n{ name: 'Craig', state: 'MN' }, \n{ name: 'Tim', state: 'MN' }, \n{ name: 'Joe', state: 'CA' } ]); \n```\n\n\n### $size\n\nMatches an array - must match given size:\n\n```javascript\n//filtered: ['food','cooking']\nsift({ tags: { $size: 2 } }, [ { tags: ['food','cooking'] }, { tags: ['traveling'] }]); \n```\n\n### $type\n\nMatches a values based on the type\n\n```javascript\nsift({ $type: Date }, [new Date(), 4342, 'hello world']); //returns single date\nsift({ $type: String }, [new Date(), 4342, 'hello world']); //returns ['hello world']\n```\n\n### $not\n\nNot expression:\n\n```javascript\nsift({$not:{$in:['craig','tim']}}, ['craig','tim','jake']); //['jake']\nsift({$not:{$size:5}}, ['craig','tim','jake']); //['tim','jake']\n```\n\n## sub object Searching\n\n\n```javascript\nvar people = [{\n\tname: 'craig',\n\taddress: {\n\t\tcity: 'Minneapolis'\n\t}\n},\n{\n\tname: 'tim',\n\taddress: {\n\t\tcity: 'St. Paul'\n\t}\n}];\n\nvar sifted = sift({ address: { city: 'Minneapolis' }}, people); // count = 1\n\n//or\nvar sifted = sift({'address.city': 'minneapolis', people});//count = 1\n```\n\n",
  "readmeFilename": "README.md",
  "_id": "sift@0.0.7",
  "_from": "sift@0.0.x"
}
