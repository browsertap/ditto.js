// Generated by CoffeeScript 1.6.2
(function() {
  var DOMClient, findXPath, _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  findXPath = require("./findXPath");

  DOMClient = (function(_super) {
    __extends(DOMClient, _super);

    function DOMClient() {
      this._onEvent = __bind(this._onEvent, this);      _ref = DOMClient.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    /*
    */


    DOMClient.prototype.init = function() {
      var event, _i, _len, _ref1, _results;

      _ref1 = this._events = ["mousedown", "mouseup", "click", "keydown", "keyup"];
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        event = _ref1[_i];
        _results.push(document.addEventListener(event, this._onEvent, true));
      }
      return _results;
    };

    /*
    */


    DOMClient.prototype.handle = function(payload) {
      var $e, e, _ref1;

      e = payload.event;
      if (!((_ref1 = payload.data) != null ? _ref1.path : void 0)) {
        return;
      }
      this._ignoreEvent = true;
      $e = $(document).xpath(payload.data.path);
      if (/keydown|keyup/.test(e)) {
        $e.val(payload.data.value);
        $e.trigger("keydown");
        $e.trigger("keyup");
      } else {
        $e.trigger(e);
      }
      return this._ignoreEvent = false;
    };

    /*
    */


    DOMClient.prototype._onEvent = function(event) {
      if (this._ignoreEvent) {
        return;
      }
      return this.dispatch({
        event: event.type,
        data: {
          path: event.target ? findXPath(event.target) : void 0,
          value: String($(event.target).val())
        }
      });
    };

    return DOMClient;

  })(require("../../../common/clients/base"));

  module.exports = DOMClient;

}).call(this);
