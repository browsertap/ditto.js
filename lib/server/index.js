// Generated by CoffeeScript 1.6.2
(function() {
  var BrowserClient, Commands, browserify, express, http, platform, sockjs, startServer,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  express = require("express");

  browserify = require("browserify-middleware");

  sockjs = require("sockjs");

  http = require("http");

  Commands = require("../common/clients/commands");

  platform = require("platform");

  module.exports = function() {
    return startServer();
  };

  BrowserClient = (function() {
    /*
    */
    function BrowserClient(_siblings, _con) {
      this._siblings = _siblings;
      this._con = _con;
      this._onCommand = __bind(this._onCommand, this);
      this._onPlatform = __bind(this._onPlatform, this);
      this._onLog = __bind(this._onLog, this);
      this._onMessage = __bind(this._onMessage, this);
      this.dispatch = __bind(this.dispatch, this);
      this._commands = new Commands();
      this._platform = {
        name: "Browser",
        version: "unknown"
      };
      this._commands.register("log", this._onLog);
      this._commands.register("platform", this._onPlatform);
      this._commands.register("*", this._onCommand);
      this._con.on("data", this._onMessage);
    }

    /*
    */


    BrowserClient.prototype.dispatch = function(payload) {
      return this._con.write(JSON.stringify(payload));
    };

    /*
    */


    BrowserClient.prototype._onMessage = function(message) {
      return this._commands.dispatch(JSON.parse(message));
    };

    /*
    */


    BrowserClient.prototype._onLog = function(payload) {
      process.stdout.write("" + this._platform.name + "@" + this._platform.version + ": ");
      return console.log.apply(console, payload.data);
    };

    /*
    */


    BrowserClient.prototype._onPlatform = function(payload) {
      return this._platform = platform.parse(payload.data);
    };

    /*
    */


    BrowserClient.prototype._onCommand = function(payload) {
      var client, _i, _len, _ref, _results;

      _ref = this._siblings;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        client = _ref[_i];
        if (client === this) {
          continue;
        }
        _results.push(client.dispatch(payload));
      }
      return _results;
    };

    return BrowserClient;

  })();

  startServer = function() {
    var app, clients, server, sock;

    app = express();
    server = http.createServer(app);
    app.use("/js/ditto.js", browserify(__dirname + "/../browser/index.js"));
    app.use(express["static"](__dirname + "/public"));
    sock = sockjs.createServer({
      sockjs_url: "http://cdn.sockjs.org/sockjs-0.3.min.js"
    });
    clients = [];
    sock.on("connection", function(con) {
      return clients.push(new BrowserClient(clients, con));
    });
    sock.installHandlers(server, {
      prefix: '/sock'
    });
    server.listen(8083);
    return app;
  };

}).call(this);
